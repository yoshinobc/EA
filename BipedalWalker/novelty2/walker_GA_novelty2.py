
# coding: utf-8

# In[1]:


import deap
#import NN
from walker_NN import NNN
from deap import base
from deap import creator
from deap import tools
import math
import gym
import random
from gym import wrappers
import time
import numpy as np
from deap import algorithms
import operator
import pickle

class hof:
    def __init__(self):
        self.hofpop = []
        self.fit = -500
    def update(self,ind,total_reward):
        self.hofpop = ind
        self.fit = total_reward

hof = hof()
env = gym.make("BipedalWalker-v2")
nn = NNN()
w_list = []
# In[9]:
count = 0
creator.create("FitnessMax",base.Fitness,weights=[1.0])
creator.create("Individual", list, fitness=creator.FitnessMax)
NGEN = 300
CXPB=0.5
MUTPB=0.2
toolbox = base.Toolbox()
max_fitness = 0
mean_fitness = 0
def decide_weight(network):
    #print(np.reshape(network['W1'],(12)))
    w_list = []
    if not network :
        w_list.extend(np.reshape(np.random.normal(0,1,(24,16)),(384)))
        w_list.extend(np.reshape(np.random.normal(0,1,(1,16)),(16)))
        w_list.extend(np.reshape(np.random.normal(0,1,(16,8)),(128)))
        w_list.extend(np.reshape(np.random.normal(0,1,(1,8)),(8)))
        w_list.extend(np.reshape(np.random.normal(0,1,(8,4)),(32)))
        w_list.extend(np.reshape(np.random.normal(0,1,(1,4)),(4)))

    return w_list

toolbox.register("gene",decide_weight,nn.network)
toolbox.register("individual",tools.initIterate,creator.Individual,toolbox.gene)
toolbox.register("population",tools.initRepeat,list,toolbox.individual)

def getfit(individual):
    observation = env.reset()
    network = nn.update(individual)
    total_reward = 0
    for _ in range(5):
        while True:
            action = get_action(observation,network)
            observation,reward,done,xylists = env.step(action)
            total_reward += reward
            if done:
                break
        if total_reward >= hof.fit:
            hof.update(individual,total_reward)
    return total_reward / 5


def EV(individual,gen):
    global count
    observation = env.reset()
    network = nn.update(individual); #networkにindividualを適用
    steps  = 0
    hull_angle_lists = []

    final_novelty = 0
    for _ in range(2):
        total_novelty = 0
        action_lists = []
        observation = env.reset()
        while True:
            action = get_action(observation,network)
            observation,reward,done,xylists = env.step(action)
            action_lists.append(xylists)
        #if (-4.8  > observation[0]) or (observation[0] > 4.8) or (0.017453292519943 < observation[3] < -0.017453292519943) or (episode_reward >= MAX_STEPS):
            if done:
                break
        for i in range(len(action_lists) - 1):
            total_novelty += np.sqrt((action_lists[i+1][0] - action_lists[i][0])**2 + (action_lists[i+1][1] - action_lists[i][1])**2)
        final_novelty += total_novelty
    return final_novelty / 2,

def EV2(individual):
    observation = env.reset()
    total_fitness = 0
    network = nn.update(individual)
    for _ in range(5):
        observation = env.reset()
        while True:
            action = get_action(observation,network)
            observation,reward,done,xylists = env.step(action)
            if done:
                break
            total_fitness += reward
    return total_fitness / 5,
toolbox.register("evaluate",EV,gen = 0)
toolbox.register("evaluate_fit",EV2)
toolbox.register("mate",tools.cxBlend,alpha=0.5) #float
toolbox.register("mutate",tools.mutGaussian,mu=0,sigma=0.5,indpb=0.05) #mutFllipBit floatに対して津えるやつ
toolbox.register("select",tools.selTournament,tournsize=3)

def get_action(observation,network):
    action = decide_action(observation,network)
    return action

def decide_action(observation,network):
    return nn.conclusion(observation,network)

def rendering(individual):
    global env
    network = nn.update(individual); #networkにindividualを適用
    total_reward = 0
    while True:
        ENV = wrappers.Monitor(env,'/mnt/c/Users/bc/Documents/EA/BipedalWalker/noveltymovies/',force=True)
        observation = ENV.reset()
        action = get_action(observation,network)
        observation,reward,done,xylists = ENV.step(action)
        total_reward += reward
    #if (-4.8  > observation[0]) or (observation[0] > 4.8) or (0.017453292519943 < observation[3] < -0.017453292519943) or (episode_reward >= MAX_STEPS):
        if done:
            ENV.render()
            #if total_reward >= 280:
                #print(individial)
            break

def main():
    global max_fitness
    global mean_fitness

    random.seed(1)

    pop = toolbox.population(n=250)
    """
    with open('gen100checkpoints', 'rb') as f:
        pop = pickle.load(f)
    """
    stats = tools.Statistics(lambda ind:ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("std", np.std)
    stats.register("min", np.min)
    stats.register("max", np.max)
    #pop,log = algorithms.eaSimple(pop,toolbox,cxpb=0.5,mutpb=0.2,ngen=200,stats=stats,halloffame=hof,verbose=True)
    novelties = list(map(toolbox.evaluate,pop))
    for ind, nov in zip(pop, novelties):
        ind.fitness.values = nov
    pop.sort(key = operator.attrgetter('fitness.values'))
    popmean = pop[75]
    for ind in pop:
        ind.fitness.values = (ind.fitness.values[0] - popmean.fitness.values[0])**2,
    fits = [getfit(ind) for ind in pop]
    print("gen","max","mean")
    flag = 0
    max_fits = 0
    for i in range(NGEN):
        # Select the next generation individuals
        offspring = toolbox.select(pop, len(pop))

        # Clone the selected individuals
        offspring = list(map(toolbox.clone, offspring))

        # Apply crossover and mutation on the offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):

            # cross two individuals with probability CXPB
            if random.random() < CXPB:
                toolbox.mate(child1, child2)

                # fitness values of the children
                # must be recalculated later
                del child1.fitness.values
                del child2.fitness.values

        for mutant in offspring:

            # mutate an individual with probability MUTPB
            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values

        # Evaluate the individuals with an invalid fitness
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]

        if flag < 10:
            fitnesses = map(toolbox.evaluate_fit,invalid_ind)
            for ind,fit in zip(invalid_ind,fitnesses):
                ind.fitness.values = fit

            pop[:] = offspring

            # Gather all the fitnesses in one list and print the stats


        else:
            print("novelty")
            flag = 0
            novelties = map(toolbox.evaluate, invalid_ind)
            for ind, nov in zip(invalid_ind, novelties):
                ind.fitness.values = nov

            offspring.sort(key = operator.attrgetter('fitness.values'))
            """
            for i, ind in enumerate(pop):
                print(i, ind.fitness.values)
            """
            popmean = offspring[75]
            for ind in offspring:
                ind.fitness.values = (ind.fitness.values[0] - popmean.fitness.values[0])**2,

            # The population is entirely replaced by the offspring
            pop[:] = offspring

        fits = [getfit(ind) for ind in pop]
        
        length = len(pop)
        mean = sum(fits) / length
        sum2 = sum(x*x for x in fits)
        std = abs(sum2 / length - mean**2)**0.5
        if abs(max(fits) - max_fits) <= 1:
            #print("flags")
            flag += 1
        #print(max(fits),max_fits,max(fits) - max_fits)
        max_fits = max(fits)
        #print("gen:",i,"  Min %s" % min(fits),"  Max %s" % max(fits),"  Avg %s" % mean,"  Std %s" % std)

        print(i,max(fits),mean)
        with open('liner_novelty2.txt',mode='a') as f:
            f.write(str(i))
            f.write(" ")
            f.write(str(max(fits)))
            f.write(" ")
            f.write(str(mean))
            f.write("\n")
        """
        if i%50 == 0:
            with open('gen'+str(i)+'checkpoint_maxstepsliner_hardcore','wb') as fp:
                pickle.dump(pop,fp)
        """


    """
    for ind in pop:
        rendering(ind)
    """
    return pop,hof
if __name__=='__main__':
    pop,hof = main()
    with open('gen1000hof','wb') as fp:
                pickle.dump(hof,fp)
    print(hof.fit,hof.hofpop)
0 -24.537904455914166 -84.29225348380758
1 -28.393035273113505 -88.14461198262777
2 -25.50765480423943 -86.06083074358394
3 -17.02046095516945 -88.67139022555912
4 -22.8134932716766 -84.29375610429429
5 -19.46133216234496 -83.16475030212189
6 -21.98848542603077 -78.57939583048383
7 -24.169231563764516 -79.7408332562659
8 -22.433152758007317 -77.02871072621764
9 -25.40599432114432 -83.54947862384418
10 -26.75638107943118 -82.70735915032594
11 -16.196681730445007 -82.82047994159676
12 -24.886219602599013 -87.53652702353828
13 -16.938140027108062 -80.95117662811047
14 -18.523978289343425 -83.51012968348067
15 -24.59027890305947 -77.84973410954218
16 -22.103828981317328 -81.77412562569634
17 -18.05854439669006 -79.75784954861372
18 -21.706788049765002 -80.97064286621574
19 -7.63641844392956 -77.55543336074298
20 2.990690213726536 -76.9317153925463
21 -7.709248994332084 -81.70919237631281
22 -10.766121258114833 -77.88069710549073
23 -18.35364167708797 -81.63934395296522
24 -11.7543859338325 -85.44397073000276
25 -21.982593100136718 -81.60481462810236
26 -18.809358873408986 -83.33999391893344
27 -25.515959666090154 -83.55194081422651
28 -19.87132487934261 -80.6393281891147
29 -20.937673057227823 -81.04431438921821
30 -19.799393242843458 -77.93944749514058
31 -23.247653515103487 -78.13143151521217
32 -25.025185936593104 -81.08559287006925
33 -23.888117245159208 -78.09885106761911
34 -20.892037479776135 -82.60138277963772
35 -18.52888669206287 -83.09658443250855
36 0.943271683523232 -77.12333901971739
37 -14.601764650948644 -83.15249171042801
38 -17.425149854482704 -77.02298164700333
39 -16.65150315650856 -83.08486765132295
40 -26.295929214137175 -84.59680056289308
41 -27.312267554932355 -83.33896865014557
42 -23.493783426625463 -82.65275781526272
43 -25.86569108367713 -78.44202204180345
44 -19.243064974205588 -77.61217481774655
45 -20.591165525720225 -79.30717176760425
46 -18.27898620712036 -82.57839454938922
47 -23.03551691244462 -82.56731237417735
48 -24.964558617078893 -85.52903138982107
49 -10.10146352272055 -80.57972670829447
50 -19.158580195769737 -82.14704123957402
51 -20.409294122590904 -83.12612972703562
52 6.139995701500946 -83.02718694936665
53 5.0477903594181495 -77.6565392003861
54 5.599540513019589 -78.62328103816122
55 3.875095466869214 -79.80853307331475
56 -6.281232455294621 -78.29947747889155
57 -16.97875389796794 -81.3790236218948
58 2.378795884162987 -82.221663620125
59 1.4767724100386392 -80.59513502107805
60 5.262658753876023 -81.70939661398883
61 -16.542479719388645 -78.41908946408293
62 -6.565405166934658 -82.5530870502669
63 -23.94606677987801 -80.53775448735384
64 -14.841788554914356 -75.76349653471912
65 -21.87626748306024 -70.98511383023059
66 -21.95833763609455 -73.7207103582938
67 -23.964160382376654 -74.98054086583912
68 -23.84755732887152 -74.6338268969896
69 -17.726668617244723 -73.03293238168663
70 -23.91147652487011 -79.81175826102869
71 -19.21534415259281 -84.45637455314353
72 -23.73899849569727 -79.97842734662156
73 -14.083655720134303 -77.02183131183044
74 -17.936916391020784 -77.14418020847492
75 -23.880656852908693 -78.3471249491066
76 -9.06884313281989 -75.86266358255621
77 -17.153375964638794 -74.21896819763492
78 5.5015465540981765 -71.10118140254421
79 -5.167756973766201 -72.7902619698364
80 4.262990044977503 -68.94643116985846
81 3.4734723409107637 -72.29471091330363
82 -25.505680816844635 -73.50349876309865
83 -1.513721333692423 -75.91489846550202
84 -18.469600818035556 -76.77334523531314
85 -0.5201308270637979 -75.42388038619092
86 -19.254651555591728 -73.862851039697
87 -9.055601395161084 -66.69921127901289
88 -21.039223329222253 -68.18999177121684
89 -21.583732201135703 -69.68199194394698
90 -5.545250157641442 -74.76552388037568
91 -13.702448927982278 -83.52668724405392
92 -15.260338623377077 -80.49772465241162
93 0.7503826621013034 -79.98135548847551
94 -17.75864845682518 -82.85276733913341
95 -22.983241793200225 -82.49288287078815
96 -23.878233060276404 -84.45265354873644
97 -28.694328333801145 -83.35808126528934
98 -25.424533898395573 -82.3294452231188
99 8.814169470224462 -83.41812430031844
100 -20.109819377439287 -84.64112808354048
101 -12.617713990795213 -77.74862664510701
102 -7.273131908040577 -75.55920072328726
103 -21.089923864394947 -78.60856903215648
104 -20.92129973327064 -78.13896392364461
105 -13.121530136289701 -80.95649573460253
106 -17.558063311333278 -85.58834574464855
107 -14.82483108879153 -84.8835021405628
108 -28.195718453716687 -91.1532666266041
109 -25.474719371583163 -89.37328956161055
110 -18.988822581929828 -92.03115348899536
111 -21.047480697966673 -91.93407288218191
112 -27.077966159735734 -92.85144568349317
113 -12.60519781655474 -89.0148402778114
114 -27.26869241339778 -90.00130393291668
115 -22.905569942133816 -83.29960131586803
116 -24.213434795672992 -85.71726358011033
117 -20.969816323240117 -80.72276764983437
118 -23.190335698462224 -77.33181386319887
119 -27.285663959297057 -78.03340894518834
120 -15.939594971752706 -70.4829274074116
121 -16.135275848371382 -72.76092239358717
novelty
122 -18.994875780850176 -68.45679148443016
123 -17.34566056735607 -51.47641236258002
124 -17.269385456520677 -56.23683843016189
125 -14.412600598304802 -59.47839972271248
126 -13.636228867924327 -62.51110840708683
127 -13.936945136350388 -60.59396747815866
128 -21.669547215695935 -63.891708752740826
129 -23.035319181823183 -71.60358714656869
130 -19.62241218342528 -70.4775215702047
131 -13.785031298205904 -77.6953538592788
132 -16.939506854696525 -74.71646814690934
133 -19.428826414604668 -72.05734715698341
134 -16.55827277953077 -72.73642622671717
135 -16.615543787355882 -76.6671352770668
136 -18.779129547143736 -77.80842869440058
137 -20.62753947525292 -72.23730923758922
138 -17.351227623152315 -65.88341238579143
139 -13.359708512782992 -68.41763680695102
140 -16.577306298732303 -68.30365563251618
141 -4.408130756205457 -72.88001115067216
142 -3.9950032143092686 -74.6478778284276
143 -11.39269002867299 -69.6311279909785
144 -13.479826254245978 -69.70975425867599
145 -12.659332175307092 -78.40413746400911
146 -9.045890513191376 -79.68704090262379
147 -16.389474295217514 -80.70926250157427
148 -21.800022189784816 -78.16558197700378
149 -18.399769106652204 -78.82928174305947
150 -16.706338071166023 -80.69975692449972
151 -18.897255833700648 -80.73256780536406
152 0.8039461679513853 -86.32913045830341
153 -23.858082542574216 -79.93581152087252
154 -20.81204823373057 -80.32805482272055
155 -9.039672390608342 -81.25129956333926
156 -24.910169301529766 -82.72071433657764
157 -16.48450964172092 -77.16374121154148
158 -13.212217425932987 -76.75744457697716
159 -22.66291305614775 -75.42882197992064
160 -22.704284362792208 -82.5824565091745
161 -26.695735629102273 -77.42181467473041
162 -20.63837984924849 -80.73569791613089
163 -19.89913174271106 -80.5879201799028
164 5.840704319367065 -84.8664080316849
165 16.053474072910085 -82.55560580687083
166 9.788164332796931 -84.97905170638766
167 -22.45609934801355 -85.82212435542142
168 8.75861066661236 -85.95017745007328
169 6.664590228863818 -87.61269466060122
170 13.94024226577925 -85.60512016928791
171 10.374795925027698 -84.12315059635837
172 -25.270287103874548 -87.01602844172122
173 11.209397190339107 -85.76235401185224
174 16.05092447980309 -79.82902648124002
175 13.56926464182474 -78.42676180009305
176 9.34537805704807 -77.41659310607892
177 -20.835962240041592 -77.4691419944721
178 -2.987312883885971 -81.68882247938528
179 -8.446143618711623 -80.5974443828862
180 -18.308424841869872 -77.10364036361871
181 -17.79583867997939 -74.55217721280063
182 -20.941750358655828 -73.72767805260666
183 -24.526258446417728 -73.64713824003152
184 -13.603328100635093 -70.99666089526913
185 -11.94696018059126 -69.94592124572479
186 -11.733337888127304 -70.48746848091254
novelty
187 -15.147729851504113 -78.04751314819238
188 -10.848300924176216 -62.250769098192734
189 -20.850624855287993 -61.63067479653953
190 -20.955302791524808 -68.64489864699851
191 -13.76410002944219 -72.38046606993508
192 -19.49899487357197 -76.90162406847642
193 -21.530296778573693 -79.10352898593801
194 -15.343616474553263 -78.76425437912138
195 -19.415878396142233 -77.6619844056979
196 -18.749427375869836 -77.26125626671777
197 -15.296334096831766 -78.73983632402188
198 -19.95791749558943 -71.8719824422946
199 -15.485921178845837 -71.83439848317471
200 11.371607428903541 -72.1571940814116
201 15.120975113428425 -73.14563371429534
202 11.811180781680465 -78.41307048404732
203 15.764360329626806 -75.8800113978908
204 -16.663234340413577 -75.87825857736793
205 0.4437698031949958 -78.3805379978667
206 -0.4755527858825771 -83.30325096970759
207 4.624243126252995 -81.50974501422607
208 -16.529207797927533 -83.18152637126707
209 10.858922962057928 -83.08795143651875
210 0.6172822012754884 -77.80041987967685
211 2.1471379773507793 -82.71974850514462
212 -11.075681875074405 -83.96096591633116
213 -16.969730810799383 -84.7785976399741
214 -19.611278836134268 -85.64824950630695
215 -18.132406667878097 -83.11374188639195
216 -12.886494100636526 -84.41095556553745
217 -21.373543049215304 -82.75245050779715
218 -26.33434030667355 -81.79714198107158
219 -23.874472305344522 -85.15502640881407
220 -21.864332258141722 -86.22352094543909
221 -19.567211093503374 -87.69620688881453
222 -6.559673049648798 -88.82844127762105
223 -16.995981572155756 -85.77137943687947
224 -21.435238006494078 -81.96933123824192
225 -12.33524454217873 -86.86056963960014
226 -25.152675852997106 -88.4730013884269
227 -9.45921415609138 -81.94720986847135
228 -13.11854897452756 -82.83174279912927
229 -16.40948233039026 -78.15435742439129
230 -12.549240018357937 -80.88965484299649
231 -22.509803997500804 -81.36537848024398
232 -9.953538872716118 -84.36172732004108
233 -26.020845609636684 -83.98101550421157
234 -18.564802028835203 -82.47670698606188
235 -16.62167200229631 -80.87686859180148
236 -21.719120395135054 -85.16927476849041
237 -19.985605486365124 -83.09146622453198
238 -11.705638233315993 -81.59854455999567
239 -14.617910975202182 -80.06587675052431
240 -18.01145909638593 -73.0244295193415
241 -11.418718469900917 -75.1444150642747
242 -21.11413142232832 -75.83997353701218
243 -18.17425683821265 -72.54615791437391
244 -13.276653487490716 -74.38482990528063
245 -21.6801941696269 -75.94102764873868
246 -19.510503504525293 -76.06491046770134
247 -17.648689126164737 -76.03924332295351
248 -22.821050221243784 -73.80421150528755
249 -18.514410525682486 -74.34035748264183
250 -21.27424196356425 -71.17650432035597
251 -18.22879084836174 -72.49148792029327
252 -21.62856554721922 -75.06508344543131
253 -21.21884064091246 -78.54489576284102
254 -14.507665077266271 -81.04254932827598
255 -23.16858552870041 -77.90522843400299
256 -18.39245436806467 -74.73366392199075
257 -21.462939094443698 -74.22711989839033
258 -17.155457229799982 -72.55040897260115
259 -15.066918570886832 -70.49827636342205
260 -17.86664310867581 -68.56999069107815
261 -13.898034373790802 -70.5455953018931
262 -19.019726697276745 -75.28931672298171
263 -22.898251577591772 -79.70577029689689
264 -22.184001208110107 -76.36084049483996
265 -19.083276808788426 -75.7995572415749
266 -23.13570735386152 -79.76101915013068
267 -10.247054584877853 -82.27599925873608
268 -21.24975220496585 -82.72685262909378
269 -17.370395313071388 -84.50573116591059
270 -7.682161043193195 -81.3653741157339
271 -20.16474940389305 -82.61441288608107
272 -27.323929682591295 -83.92061505837775
273 -24.640187346229304 -80.91091051608694
274 -22.12494501264163 -78.44553982350148
275 -21.148218418791224 -81.88189437579925
276 -17.675856926541776 -82.7605136534107
277 -21.833941627932482 -81.40172699261691
278 -22.471112580942727 -82.00793350579602
279 -25.517684542156694 -83.38935249852234
280 -20.54121285498257 -80.44699992544246
281 -19.403050547707103 -72.64062525433218
282 -20.061239184642044 -71.23588175808177
283 -16.31825667245362 -67.09910480503497
284 -18.31667661380773 -67.00917474614516
285 -0.5972172397144891 -72.17512626004566
286 -22.29038808555753 -74.17707690357055
287 -9.813849642844154 -73.15776213897654
288 -22.83326894544833 -76.70374645405842
289 -16.37996970852731 -76.08883234712198
290 -28.74223550734674 -85.17335442837067
291 -3.4453807386767017 -80.70352869182521
292 -20.3101803330787 -73.82942328538671
293 -21.369735919852193 -79.6929252953149
294 -15.43452503923229 -76.68259098611185
295 -19.577447278212297 -72.50675717198783
296 -9.662999709542472 -72.92301709248092
297 -12.394543794419407 -70.90031585163558
298 -10.86463503831498 -69.72851608470133
299 -17.057817193613356 -71.54828753445817
