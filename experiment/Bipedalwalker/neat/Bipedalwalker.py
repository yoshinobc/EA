from __future__ import print_function
import os
import neat
import visualize
import gym
import numpy as np
from gym import wrappers
import pickle

MAX_STEPS = 500
count = 0
reward_list = []
env = gym.make("BipedalWalkerHardcore-v2")
#env = wrappers.Monitor(env, '/mnt/c/Users/bc/Documents/EA/neat/cartpole/movies', video_callable=(lambda ep: ep % 150 == 0), force=True)
def eval_genomes(genomes, config):
    global env
    global MAX_STEPS
    global count
    global reward_list

    max_episode_fitness = -500
    for genome_id, genome in genomes:
        genome.fitness = 0
        net = neat.nn.FeedForwardNetwork.create(genome, config)
        observation = env.reset()
        episode_reward = 0
        for _ in range(5):
            while True:
                action = net.activate(observation)
                #print("observation",observation)
                #print("action",action)
                action = np.clip(action,-1,1)
                #env.render()
                observation,reward,done,info = env.step(action)
                episode_reward += reward
            #if (-4.8  > observation[0]) or (observation[0] > 4.8) or (0.017453292519943 < observation[3] < -0.017453292519943) or (episode_reward >= MAX_STEPS):
                if done:
                    #print(episode_reward)
                    env.reset()
                    break
            #print(episode_reward)
        genome.fitness = episode_reward / 5
        if max_episode_fitness <= episode_reward / 5  :
            max_episode_fitness = episode_reward / 5 
            winner = genome
    #print(max_episode_fitness)
    reward_list.append(max_episode_fitness / 5)
    if count % 10 == 0:
        winner_net = neat.nn.FeedForwardNetwork.create(genome, config)
        #env = wrappers.Monitor(env, '/home/bc/Documents/EA/experiment/Bipedalwalker/neat/movies', force=True)
        #observation = env.reset()
        #for i in range(500):
                #action = winner_net.activate(observation)
                #env.render()
                #action = np.clip(action,-1,1)
                #observation,reward,done,info = env.step(action)
                #episode_reward += reward
            #if (-4.8  > observation[0]) or (observation[0] > 4.8) or (0.017453292519943 < observation[3] < -0.017453292519943) or (episode_reward >= MAX_STEPS):
                #if done:
                    #observation = env.reset()
                    #break

        for n, g in enumerate([winner]):
            name = '2winner-{0}'.format(n)
            with open(name+'.pickle', 'wb') as f:
                pickle.dump(g, f)

            #visualize.draw_net(config, g, view=False, filename=str(count)+name + "-net.gv")
            visualize.draw_net(config, g, view=False, filename=str(count)+"net-enabled.gv",show_disabled=False)
    count +=1

def run(config_file):
    global env
    # Load configuration.
    config = neat.Config(neat.DefaultGenome, neat.DefaultReproduction,
                         neat.DefaultSpeciesSet, neat.DefaultStagnation,
                         config_file)

    # Create the population, which is the top-level object for a NEAT run.
    p = neat.Population(config)
    #p = neat.Checkpointer.restore_checkpoint('neat-checkpoint-9')
    # Add a stdout reporter to show progress in the terminal.
    p.add_reporter(neat.StdOutReporter(True))
    stats = neat.StatisticsReporter()
    p.add_reporter(stats)
    p.add_reporter(neat.Checkpointer(10))
    #for j in range(20):
        # Run for up to 300 generations.
    winner = p.run(eval_genomes, 1000)
    print(reward_list)
        # Display the winning genome.
    print('\nBest genome:\n{!s}'.format(winner))

        # Show output of the most fit genome against training data.
    print('\nOutput:')

    visualize.draw_net(config, winner, True)
    visualize.plot_stats(stats, ylog=False, view=True)
    visualize.plot_species(stats, view=True)
    visualize.draw_net(config,winner,view=True,filename="winner-feedforward-evabled-pruneg.gv",show_disabled=False,prune_unused=True)
    winner_net = neat.nn.FeedForwardNetwork.create(winner, config)
    final_reward = 0
    #env = wrappers.Monitor(env, '/mnt/c/Users/bc/Documents/EA/neat/BipedalWalker/movies', force=True)
    observation = env.reset()
    while True:
        action = winner_net.activate(observation)
        action = np.clip(action,-1,1)
        observation,reward,done,info = env.step(action)
        final_reward += reward
        if done:
            print("final_reward :",final_reward)
            break
        #winner_net = neat.nn.FeedForwardNetwork.create(winner, config)
    for n, g in enumerate([winner]):
        visualize.draw_net(config, g, view=False, filename=str(j)+"-net-enabled-pruned.gv",show_disabled=False, prune_unused=True)
    #p = neat.Checkpointer.restore_checkpoint('neat-checkpoint-4')
    #p.run(eval_genomes, 10)

if __name__ == '__main__':
    # Determine path to configuration file. This path manipulation is
    # here so that the script will run successfully regardless of the
    # current working directory.

    local_dir = os.path.dirname(__file__)
    config_path = os.path.join(local_dir, 'config-Feedforward')
    run(config_path)
"""
[-6.189432869400963, -3.533214332453197, -2.9863309450900184, -0.5778453313516371, -0.0393382431636201, 0.22023951573946104, -0.17173336675294343, 0.09677658492472548, 0.05913022043916394, 0.029904218011127602, 0.45119656411088993, 0.6221129581666893, 0.4715171628315953, 0.39658208041490317, 7.057954514560045, 1.902483532741949, 7.290404421317257, 7.432112024255661, 0.4859095807109406, 0.6056189461931918, 0.6442776850077878, 0.9002704549670948, 0.40985896688920154, 0.47528034841335687, 0.605497264806268, 4.689442138553081, 10.902775403756042, 12.153941047957305, 4.600012283808534, 2.2416857368512546, 15.00195649589127, 9.223369878900908, 9.64484599862648, 21.155486096599834, 21.00594801320735, 9.266429062398155, 2.473580433103864, 12.459675623063967, 11.60290811605789, 2.074394524128294, 8.059851274963986, 5.021140401633033, 8.02483863761353, 3.504890875121584, 3.658415485377283, 2.648268592292458, 6.448496871238648, 8.380146928030575, 9.636020803619537, 19.32197806506598, 7.036935875159854, 21.930848433649572, 22.553102010868944, 15.569525137696374, 20.86480982995302, 23.752744888320613, 29.343240846443962, 19.175884761253563, 21.967776346621797, 23.729216974597108, 25.969841436227377, 23.51030599582621, 23.39363442680898, 23.934269277134128, 22.334630350836584, 23.428367978001187, 19.628459262742897, 23.228431290836497, 23.402903880699377, 23.302457260755574, 20.88027522051319, 20.982746349155143, 21.07596253831852, 36.30444213250301, 28.809332010336323, 29.523025324159352, 28.36833887391151, 29.28159774029873, 31.588045193711245, 34.14032618030163, 32.17025369790741, 26.32052931564464, 33.43218218806334, 30.460147834467, 34.59797701004469, 34.79735886655821, 35.61896962219299, 34.451977690867196, 33.01037660933351, 33.44074049137835, 35.4211466054433, 36.96265439879422, 42.38312877187637, 36.56557114017686, 38.09806590417332, 37.8556598474597, 39.46988717762403, 39.058102962340136, 39.18549369925183, 34.99558468601809, 39.366201414111124, 39.233892343535636, 38.51489608346929, 38.28006562329647, 39.12106626284254, 39.03752734959522, 39.88098761848115, 38.67458263186915, 38.66702162301418, 39.50097967389966, 39.398831660873576, 39.17799169037339, 41.54030287350984, 40.859007696150194, 40.531729091367964, 41.34760125479426, 40.853685971880836, 42.272172392632925, 41.11092307526002, 41.143023252280194, 41.32677733083686, 41.39421517781882, 40.89752036906195, 41.183308503838305, 41.1278755881565, 41.08810910780205, 40.82775728878168, 40.99369152463698, 40.6945306247645, 40.7077289666221, 40.75451324235429, 41.44199643042526, 42.870036910888345, 42.55285591298554, 44.432050387843354, 44.28308750280071, 44.04656630167773, 44.34539833862629, 44.243814428209774, 44.55074629491299, 44.161844596283245, 43.80817085425887, 44.87298361576463, 43.79212260847506, 44.00207199516582, 43.784333904536076, 44.45607587840749, 43.9592639445966, 39.719202750714686, 38.44702331393516, 39.28100943351723, 40.327577246304955, 41.82807577708751, 45.04369219703038, 43.8983278861762, 39.95528606867918, 40.390864817274135, 39.77004940238429, 42.947790648174156, 39.67607195471179, 39.976316444552864, 39.018685265996965, 39.44449029556871, 38.514080531240786, 38.37883076203167, 38.24861351986061, 39.20669044408371, 40.95449092677164, 38.776885004469534, 40.728201898379396, 38.515599384545716, 39.361894181424134, 43.123310938372725, 42.30881051551595, 42.9082141920958, 41.849504547818405, 39.27937019367506, 47.031035953630344, 46.60336914567581, 40.935458555979665, 41.54124837514919, 41.57442807616469, 45.4723883558914, 46.07030691710878, 46.63537075576725, 42.83273251756379, 43.36129868238789, 42.050514039294356, 41.877890083469694, 43.7610333860564, 43.43619592094157, 43.443091370574926, 42.7700117531849, 43.315205585906995, 42.16058313662444, 42.86108259537392, 42.18821827486224, 42.68420455215106, 42.62080435451423, 42.4954995082242, 42.36260366851055, 41.92328093528111, 42.69330556885864, 41.0793882926209, 42.44316558121097, 42.72265779880062, 42.20592061273368, 41.89044647211088, 42.04192722864624, 42.216566048447895, 42.24444423620151, 43.07774554275554, 41.88691288179278, 42.677454486378096, 43.09942881147104, 42.831045379559676, 42.326343157960245, 36.80135673119467, 39.11812213192182, 38.02336456916629, 37.6026339559843, 37.853555495072236, 42.10026907695131, 37.129118817788786, 37.440912238458594, 38.662457346916256, 38.612031842964086, 39.588636309438144, 38.33278104821051, 38.02032696119048, 37.84427695870054, 39.87997729523299, 40.60814579173679, 40.388362449081534, 39.836108771118084, 39.63991477453836, 40.65870572158501, 40.00659406105551, 40.024034636772576, 39.866746188883496, 39.12765936133354, 40.608198962453415, 40.429437752121416, 41.41183839394144, 40.13651537772719, 41.27118949970304, 44.619890653740825, 40.65796130767813, 44.01916927294168, 40.46503041031168, 43.2851526676109, 41.21898554259583, 40.2032872042172, 39.16270271232723, 40.439495104641495, 40.439115060742836, 40.099345533991766, 39.17531044133895, 42.42891593176951, 39.21927328560736, 42.2930618578338, 44.12135562447077, 43.943983063513315, 43.406364426745604, 40.85187593069968, 41.594400538287054, 38.32117397800148, 39.65877944341679, 38.69944670107846, 41.13174719032314, 39.773324518295524, 40.110712564380776, 40.18269893415146, 40.566467988173414, 40.996480256056365, 39.36895620036382, 40.270328935507415, 39.65532240879977, 40.62317661714904, 40.6347144648643, 39.50812693827025, 44.597177474502054, 39.508648278546005, 40.00653869114448, 40.154234281616745, 39.037971056551626, 39.379603940600745, 39.28615840874573, 38.70214392553229, 42.40811978582987, 39.52471813659072, 41.887674120710855, 39.06812318116758, 39.34251341567002, 38.86872419149416, 39.116471334059874, 39.04124025397898, 40.59679468166165, 39.08551684419783, 38.210377702350215]
"""
