import numpy

from deap import algorithms
from deap import base
from deap import benchmarks
from deap import cma
from deap import creator
from deap import tools
import random
import matplotlib.pyplot as plt

N = 2  # 問題の次元
INDSIZE = 2
POPNUM = 150
NGEN = 100  # 総ステップ数
CXPB = 0.5
MUTPB = 0.05

creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()
toolbox.register("attr_float",random.uniform,-6,6)
toolbox.register("individual",tools.initRepeat,creator.Individual,toolbox.attr_float,n=INDSIZE)
toolbox.register("population",tools.initRepeat,list,toolbox.individual)

toolbox.register("mate",tools.cxBlend,alpha=0.5) #float
toolbox.register("mutate",tools.mutGaussian,mu=0,sigma=0.5,indpb=0.05) #mutFllipBit floatに対して津えるやつ
toolbox.register("select",tools.selTournament,tournsize = 3)

def mapping(gen):
    if gen <= 22:
        num = gen
    elif 22 < gen <= 44:
        num = 44 - gen
    elif 44 < gen <= 66:
        num = gen - 45
    elif 66 < gen <= 88:
        num = 88 - gen
    elif 88 < gen:
        num = gen - 89

    return num


def main():
    numpy.random.seed(64)
    population = toolbox.population(n=POPNUM)
    hof = tools.HallOfFame(1)


    halloffame = tools.HallOfFame(1)

    x = numpy.arange(-6, 6, 0.05) #x軸の描画範囲の生成。0から10まで0.05刻み。
    y = numpy.arange(-6, 6, 0.05) #y軸の描画範囲の生成。0から10まで0.05刻み。

    X, Y = numpy.meshgrid(x, y)

    print("gen ","min ","max ","mean ","std")
    sum_min = 0
    for gen in range(NGEN):
        fig = plt.figure()
        ax = fig.add_subplot(1,1,1)
        ax.set_xlim([-6,6])
        ax.set_ylim([-6,6])
        Z = numpy.power((numpy.power(X,2) + Y - mapping(gen)),2) + numpy.power((X + numpy.power(Y,2) - mapping(gen)),2)
        def func(pop):
            pop = numpy.clip(pop,-6,6)
            X = pop[0]
            Y = pop[1]
            return numpy.power((numpy.power(X,2) + Y - mapping(gen)),2) + numpy.power((X + numpy.power(Y,2) - mapping(gen)),2)   # 表示する計算式の指定。等高線はZに対して作られる。
        #Z = (1 - 1/(1 + 0.05 * (np.power(X,2)+(np.power((Y - 10),2)))) - 1/(1 + 0.05*(np.power((X - 10),2) + np.power(Y,2))) - 1/(1 + 0.03*(np.power((X + 10),2) + np.power(Y,2))) - 1/(1 + 0.05*(np.power((X - 5),2) + np.power((Y + 10),2))) - 1/(1 + 0.1*(np.power((X + 5),2) + np.power((Y + 10),2))))*(1 + 0.0001*np.power((np.power(X,2) + np.power(Y,2)),1.2))
        plt.pcolormesh(X, Y, Z, cmap='hsv') # 等高線図の生成。cmapで色付けの規則を指定する。
        #plt.pcolormesh(X, Y, Z,cmap='hsv') # 等高線図の生成。cmapで色付けの規則を指定す
        #pp=plt.colorbar (orientation="vertical") # カラーバーの表示
        #pp.set_label("Label", fontname="Arial", fontsize=24) #カラーバーのラベル

        plt.xlabel('X', fontsize=24)
        plt.ylabel('Y', fontsize=24)

        #for ind in population:
        #    ax.scatter(ind[0],ind[1],c='blue',marker='.')

        offspring = toolbox.select(population,len(population))
        ## Clone the selected individuals
        offspring = list(map(toolbox.clone, offspring))
        # Apply crossover and mutation on the offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            # cross two individuals with probability CXPB
            if random.random() < CXPB:
                toolbox.mate(child1, child2)

                # fitness values of the children
                # must be recalculated later
                del child1.fitness.values
                del child2.fitness.values

        for mutant in offspring:

            # mutate an individual with probability MUTPB
            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values

        # The population is entirely replaced by the offspring
        population[:] = offspring

        # Evaluate the individuals with an invalid fitness
        for ind in population:
            ax.scatter(ind[0],ind[1],c='blue',marker='.')


        fitness = list(map(func,numpy.clip(population,-6,6)))
        for ind, fit in zip(offspring, fitness):
            ind.fitness.values = fit,


        # Gather all the fitnesses in one list and print the stats
        fits = [ind.fitness.values[0] for ind in population]

        hof.update(population)


        length = len(population)
        mean = sum(fits) / length
        sum2 = sum(x*x for x in fits)
        std = abs(sum2 / length - mean**2)**0.5
        print(gen ,min(fits) ,max(fits) ,mean,std)
        sum_min += min(fits)
        if len(str(gen))==1:
            plt.savefig('ga_pic_mutpb/00'+str(gen)+'.png')
        elif(len(str(gen))) == 2:
            plt.savefig('ga_pic_mutpb/0'+str(gen)+'.png')
        elif(len(str(gen))) == 3:
            plt.savefig('ga_pic_mutpb/'+str(gen)+'.png')
        #savefig('cma_es_pic/figure'+str(gen)+'.png')
       # plt.clf()
       # plt.close()
    print(sum_min / 100)
    # 計算結果を描画
    """
    import matplotlib.pyplot as plt
    import matplotlib.cm as cm
    from matplotlib.patches import Ellipse
    plt.ion()
    fig = plt.figure()
    ax = fig.add_subplot(111)
    X = numpy.arange(-6, 6, 0.1)
    Y = numpy.arange(-6, 6, 0.1)
    X, Y = numpy.meshgrid(X, Y)
    Z = [[benchmarks.rastrigin((x, y))[0] for x, y in zip(xx, yy)]
         for xx, yy in zip(X, Y)]
    ax.imshow(Z, cmap=cm.jet, extent=[-5.12, 5.12, -5.12, 5.12])
    for x, sigma, xmean in zip(halloffame_array, C_array, centroid_array):
        # 多変量分布の分散を楕円で描画
        Darray, Bmat = numpy.linalg.eigh(sigma)
        ax.add_artist(Ellipse((xmean[0], xmean[1]),
                              numpy.sqrt(Darray[0]),
                              numpy.sqrt(Darray[1]),
                              numpy.arctan2(Bmat[1, 0], Bmat[0, 0]) * 180 / numpy.pi,
                              color="g",
                              alpha=0.7))
        ax.plot([x[0]], [x[1]], c='r', marker='o')
        ax.axis([-6, 6, -6, 6])
        plt.draw()
    plt.show(block=True)
    """

if __name__ == "__main__":
    main()
"""
mutpb=0.01
gen  min  max  mean  std
0 0.027413120274331477 2499.8815192877373 474.7903902616835 497.67416907188016
1 0.07923118146351396 1266.8490932400803 165.7587507518987 278.3275248156058
2 0.07409569120948614 672.671595107218 26.381753216578947 72.78924368384797
3 0.015774444944286037 66.52802048380451 8.819115809055608 9.309221605314912
4 0.1473558920309895 84.71392777469492 9.678553372414251 9.939625801068471
5 0.26839735897669353 68.36422665191297 12.883889872980399 11.419281545141859
6 0.6573205280041282 72.88101452479529 14.541524888073834 11.615827835474684
7 0.37552484937984343 60.741764020881575 16.063914695982962 11.125640642623088
8 2.476586384231409 53.4927531895541 16.823388288456485 8.578612075895
9 1.6155466220441315 121.67038641270918 21.506793548268362 14.543636416955783
10 2.4605577230287183 119.8147623746907 24.752510315260796 15.203255562984225
11 0.16538156201330237 118.2207037634381 26.00057864366875 16.80002015670037
12 0.02240208036732224 104.4776069175728 24.23710073010808 17.253134926851757
13 0.3615507803863325 63.3974164575543 22.65078785732262 12.7845373626481
14 0.8513755510526537 56.15805722176026 21.790332667752253 11.831017156073116
15 3.007454805256523 58.80203719331976 21.001730834434323 11.68354144485815
16 2.390416457982486 43.16019949238905 21.007240299461035 9.249493405995624
17 8.194294961903022 40.743411734639054 25.34927157039133 7.174968276594933
18 8.542815090036097 58.82899707707991 33.047882651556236 8.628770010088784
19 19.348008018721423 83.26193193195643 41.8476491398593 10.998219269173232
20 20.421248770583276 82.51319089866676 50.12823270561517 12.351006648729216
21 23.4033732960294 95.13119629186724 58.79072086512493 11.662226297910317
22 33.5342727284032 122.7527227320792 70.89325741502822 13.047479142611161
23 15.189796055444457 83.61435909988639 40.518302051625966 10.534481487465968
24 1.565532986699559 50.92977161366561 18.26890614793368 7.388099576573101
25 0.541668292911631 25.640881421694942 5.444089997929143 3.2141458482727074
26 0.09128889424599376 8.345663110528864 1.2348945906889375 1.2594342634603501
27 0.042912563829095675 5.8217566072587275 2.4834205717903814 1.1807576372343265
28 2.472403256217558 12.224376285470283 6.5390071417321645 1.5779474301592586
29 7.210701863043419 19.425709158738144 13.592958975956705 1.9391445488908001
30 13.52056018643459 32.96509939278815 24.11271810947229 2.790207738991477
31 21.868472215623235 49.696858475501756 36.77708792853644 4.302042246019693
32 34.07052483105838 67.78420535825191 51.88570140698239 5.590732774328824
33 51.72616166047938 112.1373777680156 69.43933766788702 7.796404398438416
34 70.59158232025926 104.56778207992114 87.420273040733 7.21263296969914
35 92.60262007717061 123.63254615141324 108.07262675074662 6.6187230362224865
36 114.03838333151228 154.70892323494667 132.9096908397194 7.067352726021966
37 140.22190911153893 175.7410554928382 161.25407110476237 6.190810779012712
38 167.9000766366184 211.09710811698523 192.69247493881173 7.421512506027884
39 194.55433995890684 245.6779474415161 225.7265439795515 9.188576221058646
40 226.97175324062354 291.04299682811507 262.54521018124814 9.569156346396587
41 265.83732867944053 330.559195592877 302.5809606749274 11.570853885790441
42 307.9358284348987 378.0011715203283 343.8384810306142 12.201550527057108
43 347.23999805499 480.2860451629174 385.94208193437834 15.807783698960655
44 376.87212882521203 476.62005517895125 430.65061250417574 15.825132102207057
45 349.82113168844563 454.23107236350586 418.32976912840127 16.49668013579653
46 287.56190818901666 395.3511164986137 347.95346859686225 18.60887746023722
47 222.5467170317027 318.51834471132884 283.2897019642225 17.565954029443546
48 176.45963510806945 257.5505903991333 225.28442331795804 14.596507404922137
49 118.90886433362661 255.16387173103396 173.41943927778274 15.828562733421972
50 85.79278641061656 160.86959256228533 127.36395573527135 12.48289736044853
51 56.87265531368907 138.351144490401 88.67300244946328 11.556703679349905
52 36.02960382429407 100.56996701271126 56.6775950270337 8.70425892222365
53 17.92000674847485 65.60208886435032 32.475786590172994 6.131104543467078
54 7.282012843939658 29.309948659111186 15.563579432018608 3.5380413401085353
55 0.8937051906428793 22.336602105657274 5.705495167111933 2.5165745108179616
56 0.015996890649129607 6.5005369462835 1.688007543956187 1.2333548637807819
57 0.057237692261855856 12.93511820606536 2.3320026505980285 1.791658553297111
58 1.758568204542628 13.016291720701215 5.564761139061599 2.1282836393977425
59 4.3703067115681815 20.387458190736318 11.149638134955905 2.932441261495653
60 10.372260432608794 27.708408084601736 19.122371614845342 3.326250391446996
61 19.80644722699077 38.07340364485522 29.861630121764925 3.4391482345293354
62 31.65306154995033 55.55835676893578 43.358420106695846 4.28064320916621
63 47.13802080284869 94.52168120101793 60.212080488097975 5.521394064863825
64 66.82202612823586 90.70004175525031 78.53754610041791 4.2721325477862875
65 88.37853766647393 111.25732751627098 101.53149297538133 4.171527660649325
66 105.8953113983132 146.20072388714235 127.71024900440283 6.368512900019837
67 105.8953113983132 139.81279111187712 121.77935727290348 6.607660031065583
68 69.20277961746869 102.1825099801079 87.66018506985067 5.7580100152807185
69 46.8921165638518 70.43744446663801 59.33093976334231 4.741950599215645
70 29.266097898428775 45.27015425498188 36.957444897349376 3.150495828777255
71 14.069470233417114 29.19590802004114 20.130668677059166 2.1411541823521945
72 5.1326718322514 40.178749655738976 8.980902001134925 2.8777266902415763
73 1.0367177817250441 4.265997912404105 2.6100588978995645 0.6240488384301025
74 0.09180549906127755 2.454950486728893 1.147479229422273 0.3581168348460749
75 1.6090652512267911 6.758221661469854 3.723068876077591 0.8048725700330993
76 6.142187255628387 12.161268230701648 9.493356019072836 1.0694565172314345
77 14.080533288817325 21.575149149421463 18.61408881836988 1.440233855724804
78 24.364685674395453 35.23509171698009 30.825866833868215 1.8779833912890052
79 39.646808464240294 53.296819019869844 46.32883211802529 2.582158697533445
80 58.03783702792542 71.8093948111728 64.42696561824431 3.0356216380647605
81 60.08957746132392 101.6505070662075 86.0364960017755 3.8940132007541988
82 83.97592217378357 118.1257744472086 111.39180174697259 3.4120204016341282
83 111.32762936741342 149.88589091981493 140.30289406097964 4.618132628588058
84 137.96609976312294 189.0790584532695 172.54906949976967 6.478288122543497
85 167.35638312363938 236.9109001986729 206.9812102671294 10.074020238975281
86 182.4059740546815 285.61730416671134 239.91008070433736 15.654958095615548
87 219.56120004262982 333.9548071996644 272.05503425906363 19.093908081699887
88 243.54616247278085 375.96089884181237 303.68551290238145 17.532878161377663
89 243.2652734511923 346.40858225890656 290.4652198582504 16.30378205565993
90 200.20175289994017 262.449021238298 230.9382788566416 14.324675115181364
91 146.86784583941707 227.72511617681374 178.85124608959723 13.343917012425516
92 114.832549883794 156.48757317048114 132.67658297552902 7.453478112687428
93 82.90424141674224 109.64536437575354 97.20923039912216 4.750880052264816
94 58.744719462845076 80.06605011734817 68.47068860813236 3.513017538251967
95 37.678793517949494 55.12725153712194 44.96602918091774 2.8156118683367035
96 18.47379230047861 34.38665447476793 26.919860390783583 2.3106521037718193
97 3.353908594848008 19.968470705701627 13.621462759545471 1.6248125479680262
98 0.6320851145359255 8.620446493722467 5.734652831677895 1.0016597764515989
99 0.6514807639359378 5.385711996402668 2.679132778828104 0.7257741821351836
"""
