import numpy as np
from deap import algorithms,base,cma,creator,tools,benchmarks
import matplotlib.pyplot as plt
import random
import time

class novind:
    def __init__(self,xy,novelty,fitness):
        self.xy = xy
        self.novelty = novelty
        self.fitness = fitness

    def __repr__(self):
        return repr((self.xy,self.novelty))

class noveltymap:
    def __init__(self,k,popnum):
        print("make noveltymap")
        self.map = []
        self.k = k
        self.popnum = popnum
        self.fig = plt.figure()
        self.ax = self.fig.add_subplot(1,1,1)

    def distance(self,p0,p1):
        return np.sqrt((p0[0] - p1[0])**2 + (p0[1] - p1[1]) **2)

    def insertInd(self,xy,novelty,fitness):
        self.map.append(novind(xy,novelty,fitness))
        self.ax.scatter(xy[0],xy[1],c='red',marker='.')

    def calFit(self,ind):
        return benchmarks.himmelblau(ind)[0]

    def popInd(self,population):
        for ind in population:
            distances = np.array([self.distance(p.xy,ind) for p in self.map])
            nearest_distance = sorted(distances)[:self.k]
            novelty = sum(nearest_distance) / self.k
            fitness = self.calFit(ind)
            self.insertInd(ind,novelty,fitness)
            #self.insertInd(ind,novelty)
        return sorted(self.map,key=lambda u:u.novelty)[:self.popnum]


NGEN = 100
POPNUM = 150
N = 2
INDSIZE = N
CXPB = 0.5
MUTPB = 0.01
limit = 10
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

toolbox = base.Toolbox()
#toolbox.register("attr_float",random.random)
toolbox.register("attr_float",random.uniform,-6,6)
toolbox.register("individual",tools.initRepeat,creator.Individual,toolbox.attr_float,n=INDSIZE)
toolbox.register("population",tools.initRepeat,list,toolbox.individual)


toolbox.register("evaluate",benchmarks.himmelblau)
toolbox.register("mate",tools.cxBlend,alpha=0.5) #float
toolbox.register("mutate",tools.mutGaussian,mu=0,sigma=0.5,indpb=0.05) #mutFllipBit floatに対して津えるやつ
toolbox.register("select",tools.selTournament,tournsize=3)



def main():
    np.random.seed(64)
    pop = toolbox.population(n=150)
    hof = tools.HallOfFame(1)
    stats = tools.Statistics(lambda ind:ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("std", np.std)
    stats.register("min", np.min)
    stats.register("max", np.max)
    #pop,hof = algorithms.eaSimple(pop,toolbox,cxpb=0.5,mutpb=0.01,ngen=200,stats=stats,halloffame=hof,verbose=True)
    fitness = list(map(toolbox.evaluate,np.clip(pop,-6,6)))

    for ind, fit in zip(pop, fitness):
        ind.fitness.values = fit

    nvmap = noveltymap(5,POPNUM)

    print("gen ","min ","max ","mean")
    for i in range(NGEN):
        # Select the next generation individuals
        offspring = toolbox.select(pop, len(pop))

        # Clone the selected individuals
        offspring = list(map(toolbox.clone, offspring))
        # Apply crossover and mutation on the offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            # cross two individuals with probability CXPB
            if random.random() < CXPB:
                toolbox.mate(child1, child2)

                # fitness values of the children
                # must be recalculated later
                del child1.fitness.values
                del child2.fitness.values

        for mutant in offspring:

            # mutate an individual with probability MUTPB
            if random.random() < MUTPB:
                toolbox.mutate(mutant)
                del mutant.fitness.values
        if i <= limit:
            _pop = nvmap.popInd(pop)
            for off ,_ind in zip(offspring,_pop):
                off = _ind.xy
                off.fitness.values = _ind.novelty,
                pop[:] = offspring
                fits = [benchmarks.himmelblau(ind)[0] for ind in pop]
        else:
            invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
            for ind in invalid_ind:
                nvmap.ax.scatter(ind[0],ind[1],c='blue',marker='.')
            fitness = list(map(toolbox.evaluate,np.clip(invalid_ind,-6,6)))
            for ind, fit in zip(invalid_ind, fitness):
                ind.fitness.values = fit

            # The population is entirely replaced by the offspring
            pop[:] = offspring

            # Gather all the fitnesses in one list and print the stats
            fits = [ind.fitness.values[0] for ind in pop]
        hof.update(pop)
        length = len(pop)
        mean = sum(fits) / length
        #sum2 = sum(x*x for x in fits)
        #std = abs(sum2 / length - mean**2)**0.5
        print(i ,min(fits) ,max(fits) ,mean)
        if min(fits) == 0:
            break
        #print("gen:",i,"  Min %s" % min(fits),"  Max %s" % max(fits),"  Avg %s" % mean)
        #print("gen:",i,"  Min %s" % min(fits),"  Max %s" % max(fits),"  Avg %s" % mean,"  Std %s" % std)
        #print(i,max(fits),mean)

    nvmap.fig.show()
    time.sleep(100000000)
    return pop,hof

if __name__=='__main__':
    print("pop_num = ",POPNUM)
    print("gen_num ",NGEN)
    pop,hof = main()
    expr = tools.selBest(pop,1)[0]
    print(expr)
"""
n回目までnoveltysearchを行い，それ以降はGAを行った．
gen  min  max  mean
0 2.267683230874835 2103.8101582981235 118.42109689569907
1 0.30463794689674445 5935.25801262254 119.73023812882207
2 1.3996206547453673 1442.7310812564497 87.49679812843593
3 1.3106706145784814 1250.0826978855973 73.76867054380152
4 1.77813086323643 1951.98772233438 104.23996091297543
5 0.4313999436963389 715.7429721663681 55.631568672753914
6 1.0812238874888531 1801.7486369110213 93.88074113563792
7 0.6041189312983494 1967.1133823081823 93.2035878889212
8 0.09605225868456008 5433.788279947996 117.31418479367424
9 0.4280893817935691 5630.391875277796 78.53203179207405
10 0.37807091166058093 315.19890194686235 14.094335261594603
11 0.4268708095130814 315.19890194686235 12.921360832878717
12 0.0641236163766404 17.13821122537882 3.592682215994897
13 0.06069808202741329 6.986561805226304 1.6287356319672277
14 0.050916923398651885 3.1564307778384872 0.667707830030844
15 0.01144150989838128 1.6327722764642636 0.37008045904965126
16 0.001039378123581719 0.8845257253707002 0.19457461423235983
17 0.0005306781988696557 0.3901659651542676 0.06524885421229189
18 0.0005306781988696557 0.24957121700263427 0.02836267169936122
19 8.664190629802002e-05 0.09621722901609524 0.011450518936900618
20 8.664190629802002e-05 0.026785853618262787 0.003679225588053901
21 8.664190629802002e-05 56.81297513267735 0.38043694364738445
22 2.7447218180694113e-05 0.004055566061846155 0.0009402851271090511
23 8.980206082388066e-07 0.0014509211654762284 0.000410521175861883
24 1.1500171323025283e-06 0.0010515333238052952 0.00018218373436736346
25 1.1500171323025283e-06 0.0002543176691171048 6.806217073736191e-05
26 7.66984417289748e-08 0.0001526424824152484 3.2056519641611756e-05
27 7.66984417289748e-08 8.935522282446492e-05 1.4751111842243383e-05
28 2.1207030881983785e-08 3.9470788294041974e-05 6.219102981585633e-06
29 2.4228819327023645e-08 1.2425046267031361e-05 1.7363766725219187e-06
30 8.76734751652294e-09 3.70279766143931e-06 5.475203584049236e-07
31 2.7203502829390345e-10 0.075440978991483 0.000503147055998884
32 2.7203502829390345e-10 5.781175671252408e-07 7.49670427278819e-08
33 1.515318231898405e-10 1.1849137391900239e-07 3.187827418301885e-08
34 2.2384393689413756e-11 7.690782728428792e-08 1.3885888145273362e-08
35 9.221270407879087e-12 4.418023286228924e-08 3.1768127861294984e-09
36 3.117062150760481e-12 7.25727898688582e-09 6.692688795681227e-10
37 2.2147347068931946e-12 1.1209271642448584e-09 1.5578887780426986e-10
38 1.2263109127285042e-12 4.94201253008571e-10 6.810648270591527e-11
39 2.833106620983683e-14 1.3602770531641096e-10 2.6506313570836948e-11
40 2.833106620983683e-14 1.1391801306226446e-10 9.561480828228536e-12
41 1.8315642355655194e-14 1.645384276176556e-11 3.788261121641455e-12
42 1.8077805600753092e-14 6.250777091425898e-12 1.5022937726482876e-12
43 8.169099614865607e-15 4.373397463621371e-12 5.59825352427523e-13
44 2.5412381260759004e-15 24.36627178278742 0.16244181188546783
45 1.8987776156803642e-15 4.832082708827327e-13 8.806698817960599e-14
46 6.227742361521019e-16 0.39254529221944245 0.002616968614829553
47 4.905508534812723e-16 7.673289914068387e-14 1.4757490705234438e-14
48 2.1386138975202674e-16 4.045743273819968 0.026971621825474332
49 6.781316192121318e-17 0.8154900871893003 0.005436600581265239
50 3.523634740602105e-17 1.1151467821556551e-14 1.3853686693637098e-15
51 1.5719480645090494e-17 3.5278665265597138e-15 5.407562927532913e-16
52 8.572572656342755e-18 8.420144764195493e-16 2.1642347832985874e-16
53 5.874805118851517e-18 5.30735641067498e-16 1.046981841048449e-16
54 1.2476534232818166e-18 3.027645916965994e-16 5.4275243015284576e-17
55 1.179548686357891e-18 1.5431129980683212e-16 2.8891656009600916e-17
56 1.179548686357891e-18 1.0131362513457356e-16 1.4409318432598227e-17
57 3.0325084717491495e-19 2.016854377399336e-17 6.158322950769465e-18
58 3.434749158179777e-20 1.2968847990984367e-17 3.1992287136072735e-18
59 3.434749158179777e-20 5.1513215277587665e-18 1.5626384650296277e-18
60 1.1223750343697554e-20 4.1117552643438e-18 9.142990969561513e-19
61 5.576751952570544e-22 1.964728833696439e-18 4.570167171976163e-19
62 5.576751952570544e-22 1.7283028277678017e-18 1.6539663240021998e-19
63 2.3520642040189858e-23 3.596447232375534e-19 5.126429962002146e-20
64 2.3520642040189858e-23 1.0852091533757988e-19 1.646939224479879e-20
65 2.3520642040189858e-23 4.2581614052233024e-20 5.201324828644611e-21
66 2.3520642040189858e-23 1.5089297471682007e-20 1.5613704726078695e-21
67 6.959173133678722e-24 3.4023690472938516e-21 7.280976739546055e-22
68 2.5203285506469897e-24 1.5344363972610406e-21 2.479988725626757e-22
69 1.8284186506776403e-24 5.249154876589802e-22 1.0089206793284111e-22
70 1.676854016096622e-24 7.73314478681461 0.05155429857876407
71 4.893856397719591e-26 8.325879069595194e-23 1.508273677559443e-23
72 4.893856397719591e-26 3.398867479117888e-23 5.800950176657027e-24
73 2.3338449880963634e-26 1.4911888967351626e-23 2.6520695366646928e-24
74 3.6593679671392296e-26 5.7831487625061e-24 1.3251900061138451e-24
75 4.291403324402304e-27 3.0797674053852903e-24 6.3069319457800435e-25
76 2.4265361444598323e-27 1.343625759095878e-24 3.0345477946689416e-25
77 3.155443620884047e-28 9.401833595041272e-25 1.1699800137353643e-25
78 1.0097419586828951e-28 1.7282995800306103e-25 3.489961139557558e-26
79 1.0097419586828951e-28 1.8839970568940814e-25 1.0983594373318027e-26
80 3.1554436208840472e-30 1.5950036012726054 0.011061133719251163
81 3.1554436208840472e-30 9.88600486422972e-27 1.0363160530434403e-27
82 3.1554436208840472e-30 2.199344203756181e-27 3.25089579041579e-28
83 3.1554436208840472e-30 1.337908095254836e-27 1.4883175745169755e-28
84 7.888609052210118e-31 2.5006890695506074e-28 5.190704756354257e-29
85 7.888609052210118e-31 9.860761315262648e-29 1.641356590129852e-29
86 7.888609052210118e-31 5.721616941942594 0.03814411294628396
87 7.888609052210118e-31 3.155443620884047e-29 4.4439164327450335e-30
88 7.888609052210118e-31 1.8515652840054104 0.01234376856003607
89 7.888609052210118e-31 7.099748146989106e-30 1.7144577006803323e-30
90 7.888609052210118e-31 1.5777218104420236e-29 1.9563750449481093e-30
91 7.888609052210118e-31 0.7953636334431501 0.005302424222954334
92 7.888609052210118e-31 10.271624326233207 0.06847749550822138
93 7.888609052210118e-31 7.099748146989106e-30 1.630312537456758e-30
94 7.888609052210118e-31 7.099748146989106e-30 1.966893190351056e-30
95 7.888609052210118e-31 1.5777218104420236e-29 1.9984476265598965e-30
96 7.888609052210118e-31 7.099748146989106e-30 1.630312537456758e-30
97 7.888609052210118e-31 17.938599290914826 0.11959066193943217
98 7.888609052210118e-31 2.524354896707238e-29 2.8398992587956426e-30
99 7.888609052210118e-31 2.2876966251409342e-29 2.1141472259923118e-30
"""
